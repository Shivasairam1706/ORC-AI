version: "3.8"

x-airflow-common: &airflow-common
  image: docker.io/apache/airflow:3.0.0-python3.10
  user: "${AIRFLOW_UID:-1000}:0"
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
    AIRFLOW__CELERY__RESULT_BACKEND: ${AIRFLOW__CELERY__RESULT_BACKEND}
    AIRFLOW__CELERY__BROKER_URL: ${AIRFLOW__CELERY__BROKER_URL}
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__WEBSERVER__AUTH_BACKEND: "airflow.auth.backends.password_auth"
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "true"
    AIRFLOW__WEBSERVER__RBAC: "true"
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
    AIRFLOW__CORE__DEFAULT_TIMEZONE: ${AIRFLOW__CORE__DEFAULT_TIMEZONE}
    # DAG Processor specific configurations
    AIRFLOW__SCHEDULER__STANDALONE_DAG_PROCESSOR: "true"
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 300
    AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 30
    AIRFLOW__CORE__DAGBAG_IMPORT_ERROR_TRACEBACKS: "true"
    AIRFLOW__CORE__DAGBAG_IMPORT_ERROR_TRACEBACK_DEPTH: 2
    AIRFLOW__CORE__DAGS_FOLDER_IGNORE_REGEX: '.*\.ipynb_checkpoints.*|.*__pycache__.*|.*\.pyc|.*\.pyo|.*\.DS_Store'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./orc_ai_data/airflow/dags:/opt/airflow/dags
    - ./orc_ai_data/airflow/logs:/opt/airflow/logs
    - ./orc_ai_data/airflow/plugins:/opt/airflow/plugins
  depends_on: &airflow-common-depends-on
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy
  networks:
    - orc-ai-net

services:
  # PostgreSQL - Airflow metadata database
  postgres:
    image: docker.io/postgres:15-alpine
    container_name: orc-ai-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - orc-ai-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 1
      start_period: 10s
      timeout: 5s
    restart: always

  # Redis - Celery message broker
  redis:
    image: docker.io/redis:7-alpine
    container_name: orc-ai-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - orc-ai-net
    healthcheck:
      test:
        [
          "CMD",
          "redis-cli",
          "--no-auth-warning",
          "-a",
          "${REDIS_PASSWORD}",
          "ping",
        ]
      interval: 10s
      retries: 1
      start_period: 10s
      timeout: 5s
    restart: always

  # One-time Airflow setup: DB migration, user creation, volume permissions
  airflow-init:
    <<: *airflow-common
    container_name: orc-ai-airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        # Create all necessary directories including log subdirectories
        mkdir -p /opt/airflow/logs /opt/airflow/dags /opt/airflow/plugins
        mkdir -p /opt/airflow/logs/dag_processor
        mkdir -p /opt/airflow/logs/scheduler
        mkdir -p /opt/airflow/logs/triggerer
        mkdir -p /opt/airflow/logs/dag_processor_manager

        # Set proper ownership for all airflow directories
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins}

        # Set proper permissions (755 for directories, 644 for files)
        find /opt/airflow -type d -exec chmod 755 {} \;
        find /opt/airflow -type f -exec chmod 644 {} \;

        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_PASSWORD:-airflow123}
      _PIP_ADDITIONAL_REQUIREMENTS: ""
    user: "0:0"
    volumes:
      - ./orc_ai_data/airflow/dags:/opt/airflow/dags
      - ./orc_ai_data/airflow/logs:/opt/airflow/logs
      - ./orc_ai_data/airflow/plugins:/opt/airflow/plugins

  # Airflow API Server (replaces webserver in 3.0)
  airflow-api-server:
    <<: *airflow-common
    container_name: orc-ai-api-server
    command: api-server
    user: "${AIRFLOW_UID}:0"
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 1
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Airflow DAG Processor - Separate process for parsing DAGs in Airflow 3.0
  airflow-dag-processor:
    <<: *airflow-common
    container_name: orc-ai-dag-processor
    command: dag-processor
    user: "${AIRFLOW_UID}:0"
    environment:
      <<: *airflow-common-env
      # DAG Processor specific settings
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 30
      # Ensure proper log directory permissions
      AIRFLOW__LOGGING__BASE_LOG_FOLDER: "/opt/airflow/logs"
      AIRFLOW__LOGGING__DAG_PROCESSOR_LOG_FOLDER: "/opt/airflow/logs/dag_processor"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"',
        ]
      interval: 30s
      timeout: 10s
      retries: 1
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # airflow-scheduler - Schedules tasks based on parsed DAGs
  airflow-scheduler:
    <<: *airflow-common
    container_name: orc-ai-scheduler
    command: scheduler
    user: "${AIRFLOW_UID}:0"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"',
        ]
      interval: 30s
      timeout: 10s
      retries: 1
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      airflow-dag-processor:
        condition: service_healthy

  # Airflow worker - Executes tasks using CeleryExecutor
  airflow-worker:
    <<: *airflow-common
    container_name: orc-ai-worker
    command: celery worker
    user: "${AIRFLOW_UID}:0"
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"',
        ]
      interval: 30s
      timeout: 10s
      retries: 1
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Airflow triggerer - Manages async sensors and deferrable operators
  airflow-triggerer:
    <<: *airflow-common
    container_name: orc-ai-triggerer
    command: triggerer
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"',
        ]
      interval: 30s
      timeout: 10s
      retries: 1
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Flower dashboard - Celery monitoring UI
  airflow-flower:
    <<: *airflow-common
    container_name: orc-ai-flower
    command: celery flower
    user: "${AIRFLOW_UID}:0"
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 1
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Airflow CLI - For debugging and executing Airflow commands
  airflow-cli:
    <<: *airflow-common
    container_name: orc-ai-cli
    user: "${AIRFLOW_UID}:0"
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - |
        echo "Airflow CLI is ready. Run 'docker-compose exec airflow-cli airflow [command]' to use it."
        sleep infinity

  # Prometheus - Metrics collection and monitoring
  prometheus:
    image: docker.io/prom/prometheus:v2.45.0
    container_name: orc-ai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./orc_ai_data/prometheus/config:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - orc-ai-net
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9090/",
        ]
      interval: 30s
      timeout: 10s
      retries: 1
      start_period: 30s
    restart: always

  # Grafana - Dashboards and visualization for metrics
  grafana:
    image: docker.io/grafana/grafana:10.0.0
    container_name: orc-ai-grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./orc_ai_data/grafana/provisioning:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
      GF_SECURITY_ALLOW_EMBEDDING: true
    networks:
      - orc-ai-net
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 1
      start_period: 30s
    restart: always

  # Jupyter Notebook - Development and experimentation environment
  jupyter:
    image: docker.io/jupyter/datascience-notebook:latest
    container_name: orc-ai-jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./orc_ai_data/jupyter/work:/home/jovyan/work
      - ./orc_ai_data/airflow/dags:/home/jovyan/dags
    environment:
      JUPYTER_TOKEN: ${JUPYTER_TOKEN}
      JUPYTER_ENABLE_LAB: "yes"
      GRANT_SUDO: "yes"
    networks:
      - orc-ai-net
    command: >
      bash -c "
      pip install psycopg2-binary redis prometheus-client &&
      start-notebook.py --ServerApp.token='${JUPYTER_TOKEN}' --ServerApp.password='' --ServerApp.allow_root=True
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/"]
      interval: 30s
      timeout: 10s
      retries: 1
      start_period: 30s
    restart: always

networks:
  orc-ai-net:
    driver: bridge
    name: orc-ai-net

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jupyter_data:
    driver: local
